[
    {
        "id": "86f06ab063db9ad1",
        "type": "tab",
        "label": "Flujo completo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b9eda19d7fd75cd",
        "type": "tab",
        "label": "Flujo creacion de base de datos",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "436ade1fc82c1784",
        "type": "tab",
        "label": "EndPoints",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ef90393b2a9252fc",
        "type": "tab",
        "label": "Guardar promedios",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c88f4e9f19d39aa7",
        "type": "sqlitedb",
        "db": "/home/azureuser/db/hydro-db.db",
        "mode": "RWC"
    },
    {
        "id": "0d664f1cc8511a50",
        "type": "mqtt-broker",
        "name": "Servidor de sensor 1",
        "broker": "127.0.0.1",
        "port": "2000",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "077bd6710b91c044",
        "type": "websocket-listener",
        "path": "/ws/data/humedad",
        "wholemsg": "false"
    },
    {
        "id": "2dd356477fb908ab",
        "type": "sqlitedb",
        "db": "/home/xantx/db/hydro-db.db",
        "mode": "RWC"
    },
    {
        "id": "09f4f659d5f637f1",
        "type": "websocket-listener",
        "path": "/ws/data/ph",
        "wholemsg": "false"
    },
    {
        "id": "fe5d9c7092457770",
        "type": "websocket-listener",
        "path": "/ws/data/temperatura/aire",
        "wholemsg": "false"
    },
    {
        "id": "cc2f22fe8b86af7d",
        "type": "websocket-listener",
        "path": "/ws/data/temperatura/agua",
        "wholemsg": "false"
    },
    {
        "id": "9c1511b1010c20bc",
        "type": "inject",
        "z": "86f06ab063db9ad1",
        "name": "humedad input",
        "props": [
            {
                "p": "humedad",
                "v": "56",
                "vt": "num"
            },
            {
                "p": "sensor",
                "v": "humedad",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 1600,
        "wires": [
            [
                "2848e88340f13d83"
            ]
        ]
    },
    {
        "id": "ddfe8204503c1963",
        "type": "debug",
        "z": "86f06ab063db9ad1",
        "name": "Salida",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730,
        "y": 1040,
        "wires": []
    },
    {
        "id": "79bf636695e5f0df",
        "type": "sqlite",
        "z": "86f06ab063db9ad1",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 2460,
        "y": 960,
        "wires": [
            [
                "ddfe8204503c1963"
            ]
        ]
    },
    {
        "id": "ad8a953be108205d",
        "type": "mqtt in",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/humedad",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0d664f1cc8511a50",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "3839f0a88d75305b"
            ]
        ]
    },
    {
        "id": "437d01cb27474ac9",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/humedad",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 530,
        "y": 1680,
        "wires": []
    },
    {
        "id": "457c5b617cc5af92",
        "type": "websocket out",
        "z": "86f06ab063db9ad1",
        "name": "Salida websockets",
        "server": "077bd6710b91c044",
        "client": "",
        "x": 1750,
        "y": 1660,
        "wires": []
    },
    {
        "id": "ca8d90f0bcef7265",
        "type": "websocket in",
        "z": "86f06ab063db9ad1",
        "d": true,
        "name": "In",
        "server": "077bd6710b91c044",
        "client": "",
        "x": 810,
        "y": 2240,
        "wires": [
            [
                "e29e3c624e75c2b6"
            ]
        ]
    },
    {
        "id": "e29e3c624e75c2b6",
        "type": "websocket out",
        "z": "86f06ab063db9ad1",
        "d": true,
        "name": "Salida de entrada",
        "server": "077bd6710b91c044",
        "client": "",
        "x": 1030,
        "y": 2300,
        "wires": []
    },
    {
        "id": "8f3c6d6746c9d777",
        "type": "mqtt in",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/ph",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0d664f1cc8511a50",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 220,
        "wires": [
            [
                "37db25b4d24c3d69"
            ]
        ]
    },
    {
        "id": "2848e88340f13d83",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Armar Payload Humedad",
        "func": "var { humedad, sensor } = msg\nvar dato_global = global.get(\"humedad\")\nhumedad = dato(dato_global)\nmsg.payload = {\n    humedad,\n    sensor\n}\nfunction dato (data) {\n    let valor = Math.floor(Math.random() * 101);\n    if (data <= 0)\n    {\n        global.set(\"humedad\", 50)\n        return 50\n    }\n    if ( data >= 100){\n        global.set('humedad', 50)\n        return 50\n    }\n    if (valor >= 50 ){\n        global.set(\"humedad\",data + 3)\n        return data + 3;\n    }else {\n        global.set(\"humedad\",data - 3)\n        return data - 3;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1640,
        "wires": [
            [
                "437d01cb27474ac9"
            ]
        ]
    },
    {
        "id": "327059261eb5de61",
        "type": "mqtt in",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/temperatura/aire",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0d664f1cc8511a50",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 300,
        "wires": [
            [
                "1012b71c11af4906"
            ]
        ]
    },
    {
        "id": "ae42c56a03284304",
        "type": "mqtt in",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/temperatura/agua",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0d664f1cc8511a50",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "3f25b60bcef189a2"
            ]
        ]
    },
    {
        "id": "64b18f99335694ce",
        "type": "inject",
        "z": "86f06ab063db9ad1",
        "name": "temperatura aire input",
        "props": [
            {
                "p": "temperatura_aire",
                "v": "17",
                "vt": "num"
            },
            {
                "p": "sensor",
                "v": "temp_aire",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1940,
        "wires": [
            [
                "56558bc2f1074d26"
            ]
        ]
    },
    {
        "id": "be743ab71690fac8",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/temperatura/aire",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 550,
        "y": 2020,
        "wires": []
    },
    {
        "id": "56558bc2f1074d26",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Armar Payload temp aire",
        "func": "var { temperatura_aire, sensor } = msg\nvar dato_global = global.get(\"temperatura_aire\")\ntemperatura_aire = dato(dato_global)\nmsg.payload = {\n    temperatura_aire,\n    sensor\n}\nfunction dato(data) {\n    let valor = Math.floor(Math.random() * 101);\n    if (data <= 0) {\n        global.set(\"temperatura_aire\", 20)\n        return 20\n    }\n    if (data >= 40) {\n        global.set('temperatura_aire', 25)\n        return 25\n    }\n    if (valor >= 50) {\n        global.set(\"temperatura_aire\", data + 2)\n        return data + 2;\n    } else {\n        global.set(\"temperatura_aire\", data - 2)\n        return data - 2;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1980,
        "wires": [
            [
                "be743ab71690fac8"
            ]
        ]
    },
    {
        "id": "9bd7d0bef6a8dab5",
        "type": "inject",
        "z": "86f06ab063db9ad1",
        "name": "temperatura agua input",
        "props": [
            {
                "p": "temperatura_agua",
                "v": "18",
                "vt": "num"
            },
            {
                "p": "sensor",
                "v": "temp_agua",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2080,
        "wires": [
            [
                "204bbcb82cd077f4"
            ]
        ]
    },
    {
        "id": "97d6b201cc963158",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/temperatura/agua",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 550,
        "y": 2160,
        "wires": []
    },
    {
        "id": "204bbcb82cd077f4",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Armar Payload temp agua",
        "func": "var { temperatura_agua, sensor } = msg\nvar dato_global = global.get(\"temperatura_agua\")\ntemperatura_agua = dato(dato_global)\nmsg.payload = {\n    temperatura_agua,\n    sensor\n}\nfunction dato(data) {\n    let valor = Math.floor(Math.random() * 101);\n    if (data <= 0) {\n        global.set(\"temperatura_agua\", 20)\n        return 20\n    }\n    if (data >= 40) {\n        global.set('temperatura_agua', 25)\n        return 25\n    }\n    if (valor >= 50) {\n        global.set(\"temperatura_agua\", data + 2)\n        return data + 2;\n    } else {\n        global.set(\"temperatura_agua\", data - 2)\n        return data - 2;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2120,
        "wires": [
            [
                "97d6b201cc963158"
            ]
        ]
    },
    {
        "id": "69f526bf0a216988",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Valida ph",
        "func": "var { ph, sensor } = msg.payload\nvar {min_value, max_value } = msg.params\nif (ph < min_value || ph > max_value){\n    msg.accion = \"Modificar\"\n}else{\n    msg.accion = \"No accion\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "7da38bca68aa858b",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Validar Temperatura aire",
        "func": "var { temperatura_aire, sensor } = msg.payload\nvar { min_value, max_value } = msg.params\nif (temperatura_aire < min_value || temperatura_aire > max_value){\n    msg.accion = \"Modificar\"\n}else{\n    msg.accion = \"No accion\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6651a6d2965fe8ad",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Validar Temperatura agua",
        "func": "var { temperatura_agua, sensor } = msg.payload\nvar { min_value, max_value } = msg.params\nif (temperatura_agua < min_value || temperatura_agua > max_value){\n    msg.accion = \"Modificar\"\n}else{\n    msg.accion = \"No accion\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "1343712aa04c5764",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Valida humedad",
        "func": "var { humedad, sensor } = msg.payload\nvar { min_value, max_value } = msg.params\nif (humedad < min_value || humedad > max_value){\n    msg.accion = \"Modificar\"\n}else{\n    msg.accion = \"No accion\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0d98da15a483d6d6",
        "type": "switch",
        "z": "86f06ab063db9ad1",
        "name": "Condicion Humedad",
        "property": "accion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modificar",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No accion",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1260,
        "y": 680,
        "wires": [
            [
                "bd02ede6b831c79d"
            ],
            [
                "7cc110305198ae49"
            ]
        ]
    },
    {
        "id": "740847a5e84ed083",
        "type": "switch",
        "z": "86f06ab063db9ad1",
        "name": "Condicion ph",
        "property": "accion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modificar",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No accion",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 980,
        "wires": [
            [
                "b0b1022c886ecbc7"
            ],
            [
                "bc1ffdffed3ee340"
            ]
        ]
    },
    {
        "id": "27c004431a396698",
        "type": "switch",
        "z": "86f06ab063db9ad1",
        "name": "Condicion temp aire",
        "property": "accion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modificar",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No accion",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1180,
        "y": 1200,
        "wires": [
            [
                "c6357c2a6836d5bb"
            ],
            [
                "964bfb7cfbbea6ba"
            ]
        ]
    },
    {
        "id": "de55978483076df7",
        "type": "switch",
        "z": "86f06ab063db9ad1",
        "name": "Condicion temp agua",
        "property": "accion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modificar",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No accion",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1180,
        "y": 1520,
        "wires": [
            [
                "32f3f574880a17fa"
            ],
            [
                "2a8476252a1f6d74"
            ]
        ]
    },
    {
        "id": "7cc110305198ae49",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Create Insert Humedad",
        "func": "var { humedad, sensor } = msg.payload\n\nmsg.topic = `INSERT INTO sensor_humedad (humedad, sensor) values (${humedad}, '${sensor}')`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 700,
        "wires": [
            [
                "79bf636695e5f0df"
            ]
        ]
    },
    {
        "id": "bc1ffdffed3ee340",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Create Insert ph",
        "func": "var { ph, sensor } = msg.payload\nmsg.topic = `INSERT INTO sensor_ph (ph, sensor) values (${ph}, '${sensor}')`\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 1000,
        "wires": [
            [
                "79bf636695e5f0df"
            ]
        ]
    },
    {
        "id": "964bfb7cfbbea6ba",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Create Insert temp aire",
        "func": "var { temperatura_aire, sensor } = msg.payload\n\nmsg.topic = `INSERT INTO sensor_temp_aire (temperatura_aire, sensor) values (${temperatura_aire}, '${sensor}')`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1220,
        "wires": [
            [
                "79bf636695e5f0df"
            ]
        ]
    },
    {
        "id": "2a8476252a1f6d74",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Create Insert temp agua",
        "func": "var { temperatura_agua, sensor } = msg.payload\nmsg.topic = `INSERT INTO sensor_temp_agua (temperatura_agua, sensor) values (${temperatura_agua}, '${sensor}')`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1540,
        "wires": [
            [
                "79bf636695e5f0df"
            ]
        ]
    },
    {
        "id": "74c61c5fc1cefb24",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "",
        "topic": "sensor/ph",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 440,
        "y": 1840,
        "wires": []
    },
    {
        "id": "8aa7fa1ea32bdada",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Armar Payload ph",
        "func": "var {ph , sensor } = msg\nvar dato_global = global.get(\"ph\")\nph = dato(dato_global)\nmsg.payload = \n{\n    ph,\n    sensor\n}\nfunction dato(data) {\n    let valor = Math.floor(Math.random() * 101);\n    if (data <= 0) {\n        global.set(\"ph\", 4)\n        return 4\n    }\n    if (data >= 10) {\n        global.set('ph', 7)\n        return 7\n    }\n    if (valor >= 50) {\n        global.set(\"ph\", data + 1)\n        return data + 1;\n    } else {\n        global.set(\"ph\", data - 1)\n        return data - 1;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1800,
        "wires": [
            [
                "74c61c5fc1cefb24"
            ]
        ]
    },
    {
        "id": "175e15c6fcb7b8f6",
        "type": "inject",
        "z": "86f06ab063db9ad1",
        "name": "Ph input",
        "props": [
            {
                "p": "ph",
                "v": "5.5",
                "vt": "num"
            },
            {
                "p": "sensor",
                "v": "ph",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 260,
        "y": 1760,
        "wires": [
            [
                "8aa7fa1ea32bdada"
            ]
        ]
    },
    {
        "id": "2483cc671a6296aa",
        "type": "inject",
        "z": "86f06ab063db9ad1",
        "name": "Reiniciar tablas",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2360,
        "y": 700,
        "wires": [
            [
                "f6f764d9ea1e08c8"
            ]
        ]
    },
    {
        "id": "f6f764d9ea1e08c8",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Querys de borrado de tablas",
        "func": "msg.payload = \"DELETE FROM sensor_humedad;DELETE FROM sensor_ph;DELETE FROM sensor_temp_aire;DELETE FROM sensor_temp_agua;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 720,
        "wires": [
            [
                "cb4b4064fc81f9ce"
            ]
        ]
    },
    {
        "id": "cb4b4064fc81f9ce",
        "type": "split",
        "z": "86f06ab063db9ad1",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 2850,
        "y": 740,
        "wires": [
            [
                "9a16b93e680e9bfd"
            ]
        ]
    },
    {
        "id": "9a16b93e680e9bfd",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3010,
        "y": 740,
        "wires": [
            [
                "79bf636695e5f0df"
            ]
        ]
    },
    {
        "id": "c991cfaeec459d9e",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Preparar para websocket",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "accion",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "payload.humedad",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.humedad",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 1660,
        "wires": [
            [
                "457c5b617cc5af92"
            ]
        ]
    },
    {
        "id": "3839f0a88d75305b",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Consultar Parametros",
        "func": "var sensor_name = msg.payload.sensor\nvar query = `select min_value, max_value from params where sensor = '${sensor_name}' and state = 'A'`\nmsg.params = msg.payload\nmsg.topic = query\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "90b7bc833bf35567"
            ]
        ]
    },
    {
        "id": "90b7bc833bf35567",
        "type": "sqlite",
        "z": "86f06ab063db9ad1",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 640,
        "y": 140,
        "wires": [
            [
                "779e79b86d4a3e17"
            ]
        ]
    },
    {
        "id": "779e79b86d4a3e17",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Cambios",
        "rules": [
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "algo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "params",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 140,
        "wires": [
            [
                "1343712aa04c5764"
            ]
        ]
    },
    {
        "id": "63bb3e53c0ba1b0c",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Validacion completa de humedad",
        "scope": [
            "1343712aa04c5764"
        ],
        "uncaught": false,
        "x": 870,
        "y": 680,
        "wires": [
            [
                "0d98da15a483d6d6"
            ]
        ]
    },
    {
        "id": "37db25b4d24c3d69",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Consultar Parametros",
        "func": "var sensor_name = msg.payload.sensor\nvar query = `select min_value, max_value from params where sensor = '${sensor_name}' and state = 'A'`\nmsg.params = msg.payload\nmsg.topic = query\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "dbe968dd70b9103a"
            ]
        ]
    },
    {
        "id": "dbe968dd70b9103a",
        "type": "sqlite",
        "z": "86f06ab063db9ad1",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 640,
        "y": 220,
        "wires": [
            [
                "0e3cae44e5538035"
            ]
        ]
    },
    {
        "id": "0e3cae44e5538035",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Cambios",
        "rules": [
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "algo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "params",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 220,
        "wires": [
            [
                "69f526bf0a216988"
            ]
        ]
    },
    {
        "id": "6da64c5002efdcbe",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Validacion completa de ph",
        "scope": [
            "69f526bf0a216988"
        ],
        "uncaught": false,
        "x": 810,
        "y": 980,
        "wires": [
            [
                "740847a5e84ed083"
            ]
        ]
    },
    {
        "id": "1012b71c11af4906",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Consultar Parametros",
        "func": "var sensor_name = msg.payload.sensor\nvar query = `select min_value, max_value from params where sensor = '${sensor_name}' and state = 'A'`\nmsg.params = msg.payload\nmsg.topic = query\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "9e8c1b20f93b9f33"
            ]
        ]
    },
    {
        "id": "9e8c1b20f93b9f33",
        "type": "sqlite",
        "z": "86f06ab063db9ad1",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 680,
        "y": 300,
        "wires": [
            [
                "7078c852ca115970"
            ]
        ]
    },
    {
        "id": "7078c852ca115970",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Cambios",
        "rules": [
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "algo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "params",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 300,
        "wires": [
            [
                "7da38bca68aa858b"
            ]
        ]
    },
    {
        "id": "3f25b60bcef189a2",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Consultar Parametros",
        "func": "var sensor_name = msg.payload.sensor\nvar query = `select min_value, max_value from params where sensor = '${sensor_name}' and state = 'A'`\nmsg.params = msg.payload\nmsg.topic = query\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "4d9ad17b5d0f59a8"
            ]
        ]
    },
    {
        "id": "4d9ad17b5d0f59a8",
        "type": "sqlite",
        "z": "86f06ab063db9ad1",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 680,
        "y": 380,
        "wires": [
            [
                "e9dfe883184112ba"
            ]
        ]
    },
    {
        "id": "e9dfe883184112ba",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Cambios",
        "rules": [
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "algo",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "temp",
                "pt": "msg",
                "to": "params",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "temp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 380,
        "wires": [
            [
                "6651a6d2965fe8ad"
            ]
        ]
    },
    {
        "id": "b4ffe2421019a696",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Validacion completa de temp aire",
        "scope": [
            "7da38bca68aa858b"
        ],
        "uncaught": false,
        "x": 830,
        "y": 1200,
        "wires": [
            [
                "27c004431a396698"
            ]
        ]
    },
    {
        "id": "7e3882c63fcfe7dc",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Validacion completa de temp agua",
        "scope": [
            "6651a6d2965fe8ad"
        ],
        "uncaught": false,
        "x": 840,
        "y": 1520,
        "wires": [
            [
                "de55978483076df7"
            ]
        ]
    },
    {
        "id": "7fba6038faf30cfb",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Captura de datos en tiempo real humedad",
        "scope": [
            "63bb3e53c0ba1b0c"
        ],
        "uncaught": false,
        "x": 1140,
        "y": 1660,
        "wires": [
            [
                "c991cfaeec459d9e"
            ]
        ]
    },
    {
        "id": "bd02ede6b831c79d",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Mensaje generado para accion",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 500,
        "wires": [
            [
                "67f8d95def2efda5",
                "8202a522a7cb8904"
            ]
        ]
    },
    {
        "id": "67f8d95def2efda5",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "Accion Humedad",
        "topic": "/accion/humedad",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 1690,
        "y": 460,
        "wires": []
    },
    {
        "id": "019b2218bce7efa4",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Accion completa de humedad",
        "scope": [
            "bd02ede6b831c79d"
        ],
        "uncaught": false,
        "x": 1640,
        "y": 620,
        "wires": [
            [
                "7cc110305198ae49"
            ]
        ]
    },
    {
        "id": "b0b1022c886ecbc7",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Mensaje generado para accion",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 820,
        "wires": [
            [
                "9a7b8d1fee7899ee"
            ]
        ]
    },
    {
        "id": "9a7b8d1fee7899ee",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "Accion ph",
        "topic": "/accion/ph",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 1580,
        "y": 820,
        "wires": []
    },
    {
        "id": "a141b05028958092",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Accion completa de ph",
        "scope": [
            "b0b1022c886ecbc7"
        ],
        "uncaught": false,
        "x": 1560,
        "y": 900,
        "wires": [
            [
                "bc1ffdffed3ee340"
            ]
        ]
    },
    {
        "id": "cb6d073df133cc46",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Accion completa de temp aire",
        "scope": [
            "c6357c2a6836d5bb"
        ],
        "uncaught": false,
        "x": 1560,
        "y": 1160,
        "wires": [
            [
                "964bfb7cfbbea6ba"
            ]
        ]
    },
    {
        "id": "c6357c2a6836d5bb",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Mensaje generado para accion",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1080,
        "wires": [
            [
                "289fb63a0a3c5636"
            ]
        ]
    },
    {
        "id": "289fb63a0a3c5636",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "Accion temp aire",
        "topic": "/accion/temp/aire",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 1630,
        "y": 1080,
        "wires": []
    },
    {
        "id": "40c2af9ad17abc53",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Accion completa de temp agua",
        "scope": [
            "32f3f574880a17fa"
        ],
        "uncaught": false,
        "x": 1630,
        "y": 1380,
        "wires": [
            [
                "2a8476252a1f6d74"
            ]
        ]
    },
    {
        "id": "32f3f574880a17fa",
        "type": "function",
        "z": "86f06ab063db9ad1",
        "name": "Mensaje generado para accion",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1300,
        "wires": [
            [
                "9bcfac4192a65eaf"
            ]
        ]
    },
    {
        "id": "9bcfac4192a65eaf",
        "type": "mqtt out",
        "z": "86f06ab063db9ad1",
        "name": "Accion temp agua",
        "topic": "/accion/temp/agua",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d664f1cc8511a50",
        "x": 1690,
        "y": 1300,
        "wires": []
    },
    {
        "id": "8202a522a7cb8904",
        "type": "debug",
        "z": "86f06ab063db9ad1",
        "name": "Accion",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 380,
        "wires": []
    },
    {
        "id": "c0078236e706dd48",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ph",
                "pt": "global",
                "to": "ph",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "f8b0b4c5718c4fe5",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperatura_aire",
                "pt": "global",
                "to": "temperatura_aire",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "8d6b60e9ce2b685b",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperatura_agua",
                "pt": "global",
                "to": "temperatura_agua",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "c93d93f6fef2f781",
        "type": "websocket out",
        "z": "86f06ab063db9ad1",
        "name": "Salida websockets",
        "server": "cc2f22fe8b86af7d",
        "client": "",
        "x": 1750,
        "y": 2040,
        "wires": []
    },
    {
        "id": "93628e57771ddaf4",
        "type": "websocket out",
        "z": "86f06ab063db9ad1",
        "name": "Salida websockets",
        "server": "09f4f659d5f637f1",
        "client": "",
        "x": 1730,
        "y": 1800,
        "wires": []
    },
    {
        "id": "f5ed4bfe4703f66a",
        "type": "websocket out",
        "z": "86f06ab063db9ad1",
        "name": "Salida websockets",
        "server": "fe5d9c7092457770",
        "client": "",
        "x": 1730,
        "y": 1900,
        "wires": []
    },
    {
        "id": "bf8a75a5835081cc",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Preparar para websocket",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "accion",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "payload.ph",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.ph",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 1800,
        "wires": [
            [
                "93628e57771ddaf4"
            ]
        ]
    },
    {
        "id": "e09d2f3e1c9252ae",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Captura de datos en tiempo real ph",
        "scope": [
            "6da64c5002efdcbe"
        ],
        "uncaught": false,
        "x": 1120,
        "y": 1800,
        "wires": [
            [
                "bf8a75a5835081cc"
            ]
        ]
    },
    {
        "id": "08faad861f0b5fa7",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Preparar para websocket",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "accion",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "payload.temperatura_aire",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.temperatura_aire",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 1920,
        "wires": [
            [
                "f5ed4bfe4703f66a"
            ]
        ]
    },
    {
        "id": "3c8b8963d7a0da62",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Captura de datos en tiempo real temp aire",
        "scope": [
            "b4ffe2421019a696"
        ],
        "uncaught": false,
        "x": 1140,
        "y": 1920,
        "wires": [
            [
                "08faad861f0b5fa7"
            ]
        ]
    },
    {
        "id": "d4aba6551e57c24f",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "Preparar para websocket",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "accion",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "payload.temperatura_agua",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.temperatura_agua",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 2040,
        "wires": [
            [
                "c93d93f6fef2f781"
            ]
        ]
    },
    {
        "id": "ce91cdf15661ee06",
        "type": "complete",
        "z": "86f06ab063db9ad1",
        "name": "Captura de datos en tiempo real temp agua",
        "scope": [
            "7e3882c63fcfe7dc"
        ],
        "uncaught": false,
        "x": 1140,
        "y": 2040,
        "wires": [
            [
                "d4aba6551e57c24f"
            ]
        ]
    },
    {
        "id": "bc6378883704a4ec",
        "type": "change",
        "z": "86f06ab063db9ad1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "humedad",
                "pt": "global",
                "to": "humedad",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "bd7aa0e8898fc0cf",
        "type": "sqlite",
        "z": "6b9eda19d7fd75cd",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "c6cd0f04498c8297"
            ]
        ]
    },
    {
        "id": "ec7d37068a8fa0f3",
        "type": "inject",
        "z": "6b9eda19d7fd75cd",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "bb27152b2d8786f7",
                "161d18b7423a67c9",
                "8e3f5712b3e13ac9",
                "86bb217b8cb5e775"
            ]
        ]
    },
    {
        "id": "bb27152b2d8786f7",
        "type": "function",
        "z": "6b9eda19d7fd75cd",
        "name": "tabla ph",
        "func": "msg.topic = `create table sensor_ph(\n    ph decimal not null default 0,\n    created_at integer(4) not null default (strftime('%s','now')),\n    sensor text\n);`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 220,
        "wires": [
            [
                "bd7aa0e8898fc0cf"
            ]
        ]
    },
    {
        "id": "737cd45dfd443486",
        "type": "function",
        "z": "6b9eda19d7fd75cd",
        "name": "tabla humedad",
        "func": "msg.topic = `create table sensor_humedad(\n    humedad decimal not null default 0,\n    created_at integer(4) not null default (strftime('%s','now')),\n    sensor text\n);`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 140,
        "wires": [
            [
                "bd7aa0e8898fc0cf"
            ]
        ]
    },
    {
        "id": "161d18b7423a67c9",
        "type": "function",
        "z": "6b9eda19d7fd75cd",
        "name": "tabla tempo agua",
        "func": "msg.topic = `create table sensor_temp_agua(\n    temperatura_agua decimal not null default 0,\n    created_at integer(4) not null default (strftime('%s','now')),\n    sensor text\n);`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "bd7aa0e8898fc0cf"
            ]
        ]
    },
    {
        "id": "8e3f5712b3e13ac9",
        "type": "function",
        "z": "6b9eda19d7fd75cd",
        "name": "tabla temp aire",
        "func": "msg.topic = `create table sensor_temp_aire(\n    temperatura_aire decimal not null default 0,\n    created_at integer(4) not null default (strftime('%s','now')),\n    sensor text\n);`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "bd7aa0e8898fc0cf"
            ]
        ]
    },
    {
        "id": "86bb217b8cb5e775",
        "type": "function",
        "z": "6b9eda19d7fd75cd",
        "name": "tabla params",
        "func": "msg.topic = `create table params(\n    sensor text not null,\n    min_value decimal not null default 0,\n    max_value decimal not null DEFAULT 0,\n    created_at integer(4) not null default (strftime('%s','now')),\n    updated_at integer(4) not null default (strftime('%s','now')),\n    created_by text not null default \"Admin\",\n    state text not null default \"A\"\n);`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "bd7aa0e8898fc0cf"
            ]
        ]
    },
    {
        "id": "c74e4bc1f2754255",
        "type": "function",
        "z": "6b9eda19d7fd75cd",
        "name": "datos de params",
        "func": "msg.payload = `insert into params (sensor, min_value, max_value) values (\"humedad\",55,65);insert into params (sensor, min_value, max_value) values (\"ph\",5.5,6.5);insert into params (sensor, min_value, max_value) values (\"temp_aire\",17,22);insert into params (sensor, min_value, max_value) values (\"temp_agua\",18,26);`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 560,
        "wires": [
            [
                "87d217491007c7b0"
            ]
        ]
    },
    {
        "id": "87d217491007c7b0",
        "type": "split",
        "z": "6b9eda19d7fd75cd",
        "name": "",
        "splt": ";",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 710,
        "y": 560,
        "wires": [
            [
                "786df1e4f4f519d9"
            ]
        ]
    },
    {
        "id": "786df1e4f4f519d9",
        "type": "change",
        "z": "6b9eda19d7fd75cd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 560,
        "wires": [
            [
                "bd7aa0e8898fc0cf"
            ]
        ]
    },
    {
        "id": "c6cd0f04498c8297",
        "type": "debug",
        "z": "6b9eda19d7fd75cd",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 240,
        "wires": []
    },
    {
        "id": "970b230955c5f0da",
        "type": "inject",
        "z": "6b9eda19d7fd75cd",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "c74e4bc1f2754255"
            ]
        ]
    },
    {
        "id": "220efb6c57ec3240",
        "type": "inject",
        "z": "6b9eda19d7fd75cd",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "737cd45dfd443486"
            ]
        ]
    },
    {
        "id": "e7e0bde41244d3db",
        "type": "sqlite",
        "z": "436ade1fc82c1784",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db-endpoint",
        "x": 950,
        "y": 120,
        "wires": [
            [
                "2d98b00c815a25d7"
            ]
        ]
    },
    {
        "id": "0de4a277f51e353b",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Query select all",
        "func": "var sensor = msg.req.params.sensor\nvar fecha = msg.req.params.date\n\nswitch (sensor) {\n    case \"humedad\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_humedad where created_at >= ${fecha}`        \n        break;\n    case \"ph\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_ph where created_at >= ${fecha}`\n        break;\n    case \"temp_agua\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_temp_agua where created_at >= ${fecha}`\n        break;\n    case \"temp_aire\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_temp_aire where created_at >= ${fecha}`\n        break;\n    default:\n        msg.response = \"404\"\n        msg.fail = `Bad Resquet. Sensor ${sensor} database not found`\n        \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 140,
        "wires": [
            [
                "b46981148a491c21"
            ]
        ]
    },
    {
        "id": "7a70ab4b9b91b7eb",
        "type": "http in",
        "z": "436ade1fc82c1784",
        "name": "EndPoint Historico mayores a una fecha",
        "url": "/data/historico/:sensor/date/:date",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "0de4a277f51e353b"
            ]
        ],
        "info": "# La estructura del endpoint\nDevuelve la lista de todos los datos con fecha mayor a la fecha ingresada  en la ruta\n\nhttp://[server_host]:1880/data/historico/:sensor/date/:date\n\n## Sensor names\n\n- humedad\n- ph\n- temp_agua\n- temp_aire"
    },
    {
        "id": "d06aaf8da4061363",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1570,
        "y": 120,
        "wires": []
    },
    {
        "id": "2d98b00c815a25d7",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Traformar data de respuesta",
        "func": "if(msg.payload.length == 0 ){\n    msg.payload = {name:\"Empty\", data: []}\n    return msg;\n}\n\nvar output = {\n    name: msg.payload[0].sensor,\n    data: []\n}\nmsg.payload.forEach(function(obj) {\n    output.data.push([obj.created_at, obj.humedad])\n});\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "d06aaf8da4061363"
            ]
        ]
    },
    {
        "id": "b46981148a491c21",
        "type": "switch",
        "z": "436ade1fc82c1784",
        "name": "",
        "property": "response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "404",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 240,
        "wires": [
            [
                "e7e0bde41244d3db"
            ],
            [
                "61df2113e41a4b3f"
            ]
        ]
    },
    {
        "id": "c5d81c0f372884a9",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1290,
        "y": 320,
        "wires": []
    },
    {
        "id": "61df2113e41a4b3f",
        "type": "change",
        "z": "436ade1fc82c1784",
        "name": "Mensaje de error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"msg\":\"Bad request, sensor not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 320,
        "wires": [
            [
                "c5d81c0f372884a9"
            ]
        ]
    },
    {
        "id": "de7c4df5062d54fb",
        "type": "http in",
        "z": "436ade1fc82c1784",
        "name": "Update params",
        "url": "/params",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 2120,
        "wires": [
            [
                "49f1b5b2b8192822"
            ]
        ]
    },
    {
        "id": "f12a2f5161869a23",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Repuesta Actualizacion",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1750,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8a25beaa5ad7bff0",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Insert new params",
        "func": "var { sensor, min_value, max_value } = msg.req.body\n\nswitch (sensor) {\n    case \"humedad\":\n        msg.response = \"200\"\n        msg.topic = `insert into params (sensor, min_value, max_value) values (\"${sensor}\",${min_value},${max_value});`        \n        break;\n    case \"ph\":\n        msg.response = \"200\"\n        msg.topic = `insert into params (sensor, min_value, max_value) values (\"${sensor}\",${min_value},${max_value});`\n        break;\n    case \"temp_agua\":\n        msg.response = \"200\"\n        msg.topic = `insert into params(sensor, min_value, max_value) values(\"${sensor}\", ${min_value}, ${max_value});`\n        break;\n    case \"temp_aire\":\n        msg.response = \"200\"\n        msg.topic = `insert into params(sensor, min_value, max_value) values(\"${sensor}\", ${min_value}, ${max_value});`\n        break;\n    default:\n        msg.response = \"404\"\n        msg.fail = `Bad Resquet. Sensor ${sensor} database not found`\n        \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2040,
        "wires": [
            [
                "56ee4676c672900a",
                "7d27e0cad8acb3a5"
            ]
        ]
    },
    {
        "id": "7d27e0cad8acb3a5",
        "type": "debug",
        "z": "436ade1fc82c1784",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1900,
        "wires": []
    },
    {
        "id": "56ee4676c672900a",
        "type": "sqlite",
        "z": "436ade1fc82c1784",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db-endpoint-insert",
        "x": 1470,
        "y": 2060,
        "wires": [
            [
                "f12a2f5161869a23"
            ]
        ]
    },
    {
        "id": "49f1b5b2b8192822",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Update old params",
        "func": "var { sensor } = msg.req.body\n\nswitch (sensor) {\n    case \"humedad\":\n        msg.response = \"200\"\n        msg.topic = `update params set state = 'D', updated_at = (strftime('%s','now')) where state = 'A' and sensor = '${sensor}';`\n        break;\n    case \"ph\":\n        msg.response = \"200\"\n        msg.topic = `update params set state = 'D', updated_at = (strftime('%s','now')) where state = 'A' and sensor = '${sensor}';`\n        break;\n    case \"temp_agua\":\n        msg.response = \"200\"\n        msg.topic = `update params set state = 'D', updated_at = (strftime('%s','now')) where state = 'A' and sensor = '${sensor}';`\n        break;\n    case \"temp_aire\":\n        msg.response = \"200\"\n        msg.topic = `update params set state = 'D', updated_at = (strftime('%s','now')) where state = 'A' and sensor = '${sensor}';`\n        break;\n    default:\n        msg.response = \"404\"\n        msg.fail = `Bad Resquet. Sensor ${sensor} database not found`\n        \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2020,
        "wires": [
            [
                "02f872a4d184d39c"
            ]
        ]
    },
    {
        "id": "af71669aaac1e15c",
        "type": "sqlite",
        "z": "436ade1fc82c1784",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db-endpoint-actualizar",
        "x": 720,
        "y": 2060,
        "wires": [
            [
                "8a25beaa5ad7bff0",
                "0987a933bce14151"
            ]
        ]
    },
    {
        "id": "02f872a4d184d39c",
        "type": "switch",
        "z": "436ade1fc82c1784",
        "name": "",
        "property": "response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "404",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 2300,
        "wires": [
            [
                "af71669aaac1e15c"
            ],
            [
                "de0174686a6386ea"
            ]
        ]
    },
    {
        "id": "de0174686a6386ea",
        "type": "change",
        "z": "436ade1fc82c1784",
        "name": "Mensaje de error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"msg\":\"Bad request, sensor not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 2320,
        "wires": [
            [
                "d7cdb1f6499eff9b"
            ]
        ]
    },
    {
        "id": "d7cdb1f6499eff9b",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Repuesta Actualizacion",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1110,
        "y": 2320,
        "wires": []
    },
    {
        "id": "0987a933bce14151",
        "type": "debug",
        "z": "436ade1fc82c1784",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 2120,
        "wires": []
    },
    {
        "id": "43e4483a308efa91",
        "type": "sqlite",
        "z": "436ade1fc82c1784",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db-endpoint",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "8099d081a2dcb1f3"
            ]
        ]
    },
    {
        "id": "612ae50fde23d72b",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Query select all",
        "func": "var min_fecha = msg.req.params.min_date\nvar max_fecha = msg.req.params.max_date\nvar sensor = msg.req.params.sensor\n\nswitch (sensor) {\n    case \"humedad\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_humedad where created_at >= ${min_fecha} and created_at <= ${max_fecha};`        \n        break;\n    case \"ph\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_ph where created_at >= ${min_fecha} and created_at <= ${max_fecha}`\n        break;\n    case \"temp_agua\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_temp_agua where created_at >= ${min_fecha} and created_at <= ${max_fecha}`\n        break;\n    case \"temp_aire\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM sensor_temp_aire where created_at >= ${min_fecha} and created_at <= ${max_fecha}`\n        break;\n    default:\n        msg.response = \"404\"\n        msg.fail = `Bad Resquet. Sensor ${sensor} database not found`\n        \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 540,
        "wires": [
            [
                "865b1af5a54dd994"
            ]
        ]
    },
    {
        "id": "6f51dc452c8d7cc1",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1590,
        "y": 520,
        "wires": []
    },
    {
        "id": "8099d081a2dcb1f3",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Traformar data de respuesta",
        "func": "if(msg.payload.length == 0 ){\n    msg.payload = {name:\"Empty\", data: []}\n    return msg;\n}\n\nvar output = {\n    name: msg.payload[0].sensor,\n    data: []\n}\nmsg.payload.forEach(function(obj) {\n    output.data.push([obj.created_at, obj.humedad])\n});\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 520,
        "wires": [
            [
                "6f51dc452c8d7cc1"
            ]
        ]
    },
    {
        "id": "865b1af5a54dd994",
        "type": "switch",
        "z": "436ade1fc82c1784",
        "name": "",
        "property": "response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "404",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 640,
        "wires": [
            [
                "43e4483a308efa91"
            ],
            [
                "308aabacb158e440"
            ]
        ]
    },
    {
        "id": "b59cc82718c0ce93",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1310,
        "y": 720,
        "wires": []
    },
    {
        "id": "308aabacb158e440",
        "type": "change",
        "z": "436ade1fc82c1784",
        "name": "Mensaje de error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"msg\":\"Bad request, sensor not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 720,
        "wires": [
            [
                "b59cc82718c0ce93"
            ]
        ]
    },
    {
        "id": "b00e25ccca2cecb3",
        "type": "http in",
        "z": "436ade1fc82c1784",
        "name": "EndPoint Historico entre dos fechas",
        "url": "/data/historico/:sensor/mindate/:min_date/maxdate/:max_date",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 540,
        "wires": [
            [
                "612ae50fde23d72b"
            ]
        ],
        "info": "# La estructura del endpoint\n\nhttp://[server_host]:1880/sensor/humedad?date=[date_eposh]&sensor=[sensor_name]\n\n## Sensor names\n\n- humedad\n- ph\n- temp_agua\n- temp_aire"
    },
    {
        "id": "64c250a9d67b54a5",
        "type": "sqlite",
        "z": "436ade1fc82c1784",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db-endpoint",
        "x": 1030,
        "y": 980,
        "wires": [
            [
                "0c0c264f41665271"
            ]
        ]
    },
    {
        "id": "221b2868012bdc05",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Query select all",
        "func": "var date = msg.req.params.date\nvar sensor = msg.req.params.sensor\n\nswitch (sensor) {\n    case \"humedad\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_hour_humedad where created_at >= ${date} and created_at <= ${date + 86400};`        \n        break;\n    case \"ph\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_hour_ph where created_at >= ${date} and created_at <= ${date + 86400}`\n        break;\n    case \"temp_agua\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_hour_temp_agua where created_at >= ${date} and created_at <= ${date + 86400}`\n        break;\n    case \"temp_aire\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_hour_temp_aire where created_at >= ${date} and created_at <= ${date + 86400}`\n        break;\n    default:\n        msg.response = \"404\"\n        msg.fail = `Bad Resquet. Sensor ${sensor} database not found`\n        \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "11ab04b357f7acd7"
            ]
        ]
    },
    {
        "id": "0c0c264f41665271",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Traformar data de respuesta",
        "func": "if(msg.payload.length == 0 ){\n    msg.payload = {name:\"Empty\", data: []}\n    return msg;\n}\n\nvar output = {\n    name: msg.payload[0].sensor,\n    data: []\n}\nmsg.payload.forEach(function(obj) {\n    output.data.push([obj.created_at, obj.humedad])\n});\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 980,
        "wires": [
            [
                "fd565d7cf12c07e2"
            ]
        ]
    },
    {
        "id": "11ab04b357f7acd7",
        "type": "switch",
        "z": "436ade1fc82c1784",
        "name": "",
        "property": "response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "404",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1100,
        "wires": [
            [
                "64c250a9d67b54a5"
            ],
            [
                "96a54189d1eaac9f"
            ]
        ]
    },
    {
        "id": "d2cdfcf62ff6e6e7",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1370,
        "y": 1180,
        "wires": []
    },
    {
        "id": "96a54189d1eaac9f",
        "type": "change",
        "z": "436ade1fc82c1784",
        "name": "Mensaje de error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"msg\":\"Bad request, sensor not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1180,
        "wires": [
            [
                "d2cdfcf62ff6e6e7"
            ]
        ]
    },
    {
        "id": "79df4242a2ed37b3",
        "type": "http in",
        "z": "436ade1fc82c1784",
        "name": "EndPoint Historico entre de las horas del dia",
        "url": "/data/historico/:sensor/horas/date/:date",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1000,
        "wires": [
            [
                "221b2868012bdc05"
            ]
        ],
        "info": "# La estructura del endpoint\n\nhttp://[server_host]:1880/sensor/humedad?date=[date_eposh]&sensor=[sensor_name]\n\n## Sensor names\n\n- humedad\n- ph\n- temp_agua\n- temp_aire"
    },
    {
        "id": "fd565d7cf12c07e2",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1650,
        "y": 980,
        "wires": []
    },
    {
        "id": "b52813a05d0f4557",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1530,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f4da3d4588dc2fe8",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Traformar data de respuesta",
        "func": "if(msg.payload.length == 0 ){\n    msg.payload = {name:\"Empty\", data: []}\n    return msg;\n}\n\nvar output = {\n    name: msg.payload[0].sensor,\n    data: []\n}\nmsg.payload.forEach(function(obj) {\n    output.data.push([obj.created_at, obj.humedad])\n});\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1400,
        "wires": [
            [
                "b52813a05d0f4557"
            ]
        ]
    },
    {
        "id": "01d8b3b5b9e07c59",
        "type": "sqlite",
        "z": "436ade1fc82c1784",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db-endpoint",
        "x": 910,
        "y": 1400,
        "wires": [
            [
                "f4da3d4588dc2fe8"
            ]
        ]
    },
    {
        "id": "8d43e1a53bc2620f",
        "type": "switch",
        "z": "436ade1fc82c1784",
        "name": "",
        "property": "response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "404",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "01d8b3b5b9e07c59"
            ],
            [
                "7a8c186391a9673e"
            ]
        ]
    },
    {
        "id": "e966df6d9e16a90c",
        "type": "function",
        "z": "436ade1fc82c1784",
        "name": "Query select all",
        "func": "var min_fecha = msg.req.params.min_date\nvar max_fecha = msg.req.params.max_date\nvar sensor = msg.req.params.sensor\n\nswitch (sensor) {\n    case \"humedad\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_minute_humedad where created_at >= ${min_fecha} and created_at <= ${max_fecha};`        \n        break;\n    case \"ph\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_minute_ph where created_at >= ${min_fecha} and created_at <= ${max_fecha}`\n        break;\n    case \"temp_agua\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_minute_temp_agua where created_at >= ${min_fecha} and created_at <= ${max_fecha}`\n        break;\n    case \"temp_aire\":\n        msg.response = \"200\"\n        msg.topic = `SELECT * FROM avg_minute_temp_agua where created_at >= ${min_fecha} and created_at <= ${max_fecha}`\n        break;\n    default:\n        msg.response = \"404\"\n        msg.fail = `Bad Resquet. Sensor ${sensor} database not found`\n        \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1420,
        "wires": [
            [
                "8d43e1a53bc2620f"
            ]
        ]
    },
    {
        "id": "7a8c186391a9673e",
        "type": "change",
        "z": "436ade1fc82c1784",
        "name": "Mensaje de error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"msg\":\"Bad request, sensor not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1600,
        "wires": [
            [
                "76ffecca959f5f49"
            ]
        ]
    },
    {
        "id": "0c9d63b6ae26232e",
        "type": "http in",
        "z": "436ade1fc82c1784",
        "name": "EndPoint Historico minutos entre dos fechas",
        "url": "/data/historico/minutos/:sensor/mindate/:min_date/maxdate/:max_date",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1420,
        "wires": [
            [
                "e966df6d9e16a90c"
            ]
        ],
        "info": "# La estructura del endpoint\n\nhttp://[server_host]:1880/sensor/humedad?date=[date_eposh]&sensor=[sensor_name]\n\n## Sensor names\n\n- humedad\n- ph\n- temp_agua\n- temp_aire"
    },
    {
        "id": "76ffecca959f5f49",
        "type": "http response",
        "z": "436ade1fc82c1784",
        "name": "Respuesta humedad historica",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1250,
        "y": 1600,
        "wires": []
    },
    {
        "id": "37bfcfd9290e3d0c",
        "type": "inject",
        "z": "ef90393b2a9252fc",
        "name": "Promedio luego de una hora",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 320,
        "wires": [
            [
                "fdfc937c6bfc905b",
                "b2beb3655d59d576",
                "7124cfd0acd80636",
                "d0e36dbdc566d0b3"
            ]
        ]
    },
    {
        "id": "4ff9a96b281fb503",
        "type": "sqlite",
        "z": "ef90393b2a9252fc",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 940,
        "y": 320,
        "wires": [
            [
                "70860a5d7163f1dc"
            ]
        ]
    },
    {
        "id": "fdfc937c6bfc905b",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg humedad",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_hour_humedad (humedad, sensor) values (\n        (select round(avg(humedad)) from avg_minute_humedad\n            where created_at <= ${time}\n            and created_at >= ${time - 3600}\n        )\n        ,'humedad');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "4ff9a96b281fb503"
            ]
        ]
    },
    {
        "id": "70860a5d7163f1dc",
        "type": "debug",
        "z": "ef90393b2a9252fc",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 320,
        "wires": []
    },
    {
        "id": "b2beb3655d59d576",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg ph",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_hour_ph (ph, sensor) \n    values (\n        (select round(avg(ph)) \n        from avg_minute_ph\n            where created_at <= ${time}\n            and created_at >= ${time - 3600}\n        )\n        ,'ph');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 400,
        "wires": [
            [
                "4ff9a96b281fb503"
            ]
        ]
    },
    {
        "id": "7124cfd0acd80636",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg temp aire",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_hour_temp_aire \n    (temperatura_aire, sensor) values (\n        (select round(avg(temperatura_aire)) \n        from avg_minute_temp_aire\n            where created_at <= ${time}\n            and created_at >= ${time - 3600}\n        )\n        ,'temp_aire');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 460,
        "wires": [
            [
                "4ff9a96b281fb503"
            ]
        ]
    },
    {
        "id": "d0e36dbdc566d0b3",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg temp agua",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_hour_temp_agua \n    (temperatura_agua, sensor) values (\n        (select round(avg(temperatura_agua)) \n        from avg_minute_temp_agua\n            where created_at <= ${time}\n            and created_at >= ${time - 3600}\n        )\n        ,'temp_agua');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 540,
        "wires": [
            [
                "4ff9a96b281fb503"
            ]
        ]
    },
    {
        "id": "559fce2e0062b699",
        "type": "inject",
        "z": "ef90393b2a9252fc",
        "name": "Promedio luego de una hora",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 740,
        "wires": [
            [
                "04584764036e8499",
                "0e6cd0deb73786b9",
                "aa50cacc59eecccb",
                "188d795539c7c310"
            ]
        ]
    },
    {
        "id": "32f45fa0461460f2",
        "type": "sqlite",
        "z": "ef90393b2a9252fc",
        "mydb": "c88f4e9f19d39aa7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "hydro-db",
        "x": 900,
        "y": 740,
        "wires": [
            [
                "7d5013a1f35413e3"
            ]
        ]
    },
    {
        "id": "04584764036e8499",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg humedad",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_minute_humedad (humedad, sensor) values (\n        (select round(avg(humedad)) from sensor_humedad\n            where created_at <= ${time}\n            and created_at >= ${time - 60}\n        )\n        ,'humedad');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 740,
        "wires": [
            [
                "32f45fa0461460f2"
            ]
        ]
    },
    {
        "id": "7d5013a1f35413e3",
        "type": "debug",
        "z": "ef90393b2a9252fc",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 740,
        "wires": []
    },
    {
        "id": "0e6cd0deb73786b9",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg ph",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_minute_ph (ph, sensor) \n    values (\n        (select round(avg(ph)) \n        from sensor_ph\n            where created_at <= ${time}\n            and created_at >= ${time - 60}\n        )\n        ,'ph');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 820,
        "wires": [
            [
                "32f45fa0461460f2"
            ]
        ]
    },
    {
        "id": "aa50cacc59eecccb",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg temp aire",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_minute_temp_aire \n    (temperatura_aire, sensor) values (\n        (select round(avg(temperatura_aire)) \n        from sensor_temp_aire\n            where created_at <= ${time}\n            and created_at >= ${time - 60}\n        )\n        ,'temp_aire');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 880,
        "wires": [
            [
                "32f45fa0461460f2"
            ]
        ]
    },
    {
        "id": "188d795539c7c310",
        "type": "function",
        "z": "ef90393b2a9252fc",
        "name": "Avg temp agua",
        "func": "var time = Math.floor(new Date().getTime() / 1000.0)\nmsg.topic = `\n    insert into avg_minute_temp_agua \n    (temperatura_agua, sensor) values (\n        (select round(avg(temperatura_agua)) \n        from sensor_temp_agua\n            where created_at <= ${time}\n            and created_at >= ${time - 3600}\n        )\n        ,'temp_agua');\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 960,
        "wires": [
            [
                "32f45fa0461460f2"
            ]
        ]
    },
    {
        "id": "099f8be549f2026d",
        "type": "debug",
        "z": "ef90393b2a9252fc",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 640,
        "wires": []
    }
]